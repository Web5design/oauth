<?php
// $Id: oauth_common.install,v 1.4 2010/01/19 10:43:58 hugowetterberg Exp $

function oauth_common_install() {
  drupal_install_schema('oauth_common');

  oauth_common_install_default_oauth_context();
}

function oauth_common_install_default_oauth_context() {
  module_load_include('module', 'oauth_common');

  // Create default authorization levels
  oauth_common_write_authorization_level('*', 'Full access',
    'This will give @appname the same permissions that you normally have and will allow it to access the full range of services that @sitename provides.', 'default', -1);
  oauth_common_write_authorization_level('read', 'Read access',
    'This will allow @appname to fetch content that you have access to on @sitename.');
  oauth_common_write_authorization_level('update', 'Update access',
    'This will allow @appname to update content that you have permissions to edit.');
  oauth_common_write_authorization_level('create', 'Create access',
    'This will allow @appname to create new content on @sitename.');
  oauth_common_write_authorization_level('delete', 'Delete access',
    'This will allow @appname to delete content from @sitename.');
}

function oauth_common_uninstall() {
  drupal_uninstall_schema('oauth_common');
}

function oauth_common_schema() {
  $schema = array();

  $schema['oauth_authorization_levels'] = array(
    'description' => t('Stores the different authorization levels that are available for access tokens.'),
    'fields' => array(
      'name' => array(
        'description' => t('The computer-readable name of the authorization level.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'context' => array(
        'description' => t('The context for the authorization level.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
        'default'     => '',
      ),
      'title' => array(
        'description' => t('The localizable title of the authorization level.'),
        'type'        => 'varchar',
        'length'      => 100,
        'not null'    => TRUE,
      ),
      'description' => array(
        'description' => t('The localizable description of the authorization level.'),
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Determines the order that the authorization levels will be displayed in.',
      ),
      'enabled' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
        'description' => 'Whether the authorization level is enabled or disabled.',
      ),
    ),
    'primary key' => array('name'),
  );

  $schema['oauth_common_consumer'] = array(
    'description' => t('Information that allows external applications to access services.'),
    'fields' => array(
      'consumer_key' => array(
        'description' => t('Consumer key.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'provider_consumer' => array(
        'description' => t('Whether this is a provider consumer or a consumer consumer'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'secret' => array(
        'description' => t('Consumer secret.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the consumer was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The last time the consumer was edited, as a Unix timestamp.',
      ),
      'uid' => array(
        'description' => t('The application owner.'),
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
      ),
      'name' => array(
        'description' => t('The application name.'),
        'type'        => 'varchar',
        'length'      => 128,
        'not null'    => TRUE,
      ),
      'type' => array(
        'description' => t('The application type.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'context' => array(
        'description' => t('The application context.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
        'default'     => '',
      ),
      'callback_url' => array(
        'description' => t('Callback url.'),
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
      ),
    ),
    'primary key' => array('consumer_key'),
    'index' => array(
      'user' => array('uid'),
    ),
  );
  $schema['oauth_common_token'] = array(
    'description' => t('Tokens stored on behalf of providers or consumers for request and services accesses.'),
    'fields' => array(
      'token_key' => array(
        'description' => t('Token key.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'provider_token' => array(
        'description' => t('Whether this is a consumer or a provider token'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'secret' => array(
        'description' => t('Token secret.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'created' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The time that the token was created, as a Unix timestamp.',
      ),
      'changed' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The last time the token was edited, as a Unix timestamp.',
      ),
      'expires' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The expiry time for the token, as a Unix timestamp.',
      ),
      'type' => array(
        'description' => t('Token type: request or access.'),
        'type'        => 'varchar',
        'length'      => 7,
        'not null'    => TRUE,
      ),
      'uid' => array(
        'description' => t('User ID from {user}.uid.'),
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'consumer_key' => array(
        'description' => t('Consumer key from {oauth_common_consumer}.consumer_key.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE,
      ),
      'services' => array(
        'description' => t('An array of services that the user allowed the consumer to access.'),
        'type'        => 'text',
      ),
      'authorized' => array(
        'description' => t('In case its a request token, it checks if the user already authorized the consumer to get an access token.'),
        'type'        => 'int',
        'size'        => 'tiny',
        'not null'    => TRUE,
        'default'     => 0,
      ),
    ),
   'primary key' => array('token_key'),
   'indexes' => array(
      'token_key_type' => array('token_key', 'type'),
      'consumer_key' => array('consumer_key'),
    ),
  );
  $schema['oauth_common_consumer_token'] = array(
    'description' => t('Tokens stored on behalf of consumers for request and services accesses.'),
    'fields' => array(
      'token_key' => array(
        'description' => t('Token key.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'secret' => array(
        'description' => t('Token secret.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'uid' => array(
        'description' => t('The user that\'s associated with the token, if any.'),
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
      'provider_url' => array(
        'description' => t('The url to the provider.'),
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
      ),
      'access_endpoint' => array(
        'description' => t('The endpoint to fetch the access token.'),
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
        'default'     => '',
      ),
    ),
   'primary key' => array('token_key'),
  );
  $schema['oauth_common_nonce'] = array(
    'description' => t('Stores timestamp against nonce for repeat attacks.'),
    'fields' => array(
      'nonce' => array(
        'description' => t('The random 32 characters long string used on each request.'),
        'type'        => 'varchar',
        'length'      => 32,
        'not null'    => TRUE
      ),
      'timestamp' => array(
        'description' => t('The timestamp of the request.'),
        'type'        => 'int',
        'not null'    => TRUE
      ),
      'token' => array(
        'description' => t('Tokens for request and services accesses.'),
        'type'        => 'varchar',
        'length'      => 32
      ),
    ),
    'primary key' => array('nonce'),
    'indexes' => array(
      'timestamp' => array('timestamp'),
    ),
  );
  return $schema;
}

/**
 * This update either creates a authorization levels table, or transfers the
 * authorization levels table from the services_oauth module.
 */
function oauth_common_update_6001() {
  module_load_include('6001.inc', 'oauth_common', 'updates/update');
  return _oauth_common_update_6001();
}

/**
 * This update adds a expiry time column to the tokens table.
 */
function oauth_common_update_6002() {
  module_load_include('6002.inc', 'oauth_common', 'updates/update');
  return _oauth_common_update_6002();
}

/**
 * This update makes it possible for consumers to store tokens in the common
 * token table. It also adds the possibility to add consumer-consumers to the
 * common consumer table.
 *
 * NB: There is a weakness in the current implementation that prevents a site
 *     from acting as a consumer of itself. That would result in hitting a
 *     unique constraint in the db as the token key is the primary key. /Hugo
 */
function oauth_common_update_6003() {
  module_load_include('6003.inc', 'oauth_common', 'updates/update');
  return _oauth_common_update_6003();
}

/**
 * This update adds the concept of contexts for consumers and authorization levels.
 * Also adding a couple of indexes that make sense when oauth_common is
 * acting as a consumer of other services.
 */
function oauth_common_update_6100() {
  module_load_include('6100.inc', 'oauth_common', 'updates/update');
  return _oauth_common_update_6100();
}